apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "odoo.fullname" . }}
  labels:
    {{- include "odoo.labels" . | nindent 4 }}
spec:
  replicas: 1
  serviceName: {{ include "odoo.fullname" . }}-headless
  selector:
    matchLabels:
      {{- include "odoo.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        service_name: {{ .Values.apptype }}
        stack_name: {{  .Release.Name }}
        name: {{ include "odoo.fullname" . }}
        {{- include "odoo.selectorLabels" . | nindent 8 }}
    spec:  
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - command:
        - /bin/bash
        - -ecx
        - |
          # usage: docker_process_init_files [file [file [...]]]
          #    ie: docker_process_init_files /always-initdb.d/*
          # process initializer files, based on file extensions and permissions
          docker_process_init_files() {
                  for f; do
                          case "$f" in
                                  *.sh)
                                          # https://github.com/docker-library/postgres/issues/450#issuecomment-393167936
                                          # https://github.com/docker-library/postgres/pull/452
                                          if [ -x "$f" ]; then
                                                  echo "$0: running $f"
                                                  "$f"
                                          else
                                                  echo "$0: sourcing $f"
                                                  . "$f"
                                          fi
                                          ;;
                                  *)        echo "$0: ignoring $f" ;;
                          esac
                  done
          }
          if [ ! -d /cloudclusters/.docker-entrypoint.d ]; then
              mkdir -p /cloudclusters/.docker-entrypoint.d
              touch /cloudclusters/.docker-entrypoint.d/111
          fi
          docker_process_init_files /cloudclusters/.docker-entrypoint.d/*

          # Update odoo config file with format "setting = value"
          function add_setting_to_conf
          {
              local _setting=${1}
              local _value=${2}

              if grep -i -q -F "${_setting}" "${ODOO_RC}"; then
                  # Replace existing line with new value
                  # echo "Update existing setting."
                  sed -i 's/^.*'"${_setting}"'.*/'"${_setting}"' = '"${_value}"'/' "${ODOO_RC}"
              else
                  # Append new setting to the end
                  # echo "Append new setting."
                  sed -i '$a\'"${_setting}"' = '"${_value}"'' "${ODOO_RC}"
              fi
          }

          if [ ! -d /cloudclusters/config ]; then
             mkdir /cloudclusters/config
             mkdir /cloudclusters/config/odoo
             #config file
             cp /opt/odoo/odoo.conf.default /cloudclusters/config/odoo/odoo.conf
            sed -i "s#^admin_passwd.*#admin_passwd = ${MASTER_PASSWORD}#g" /cloudclusters/config/odoo/odoo.conf

            # If var MEM_LIMIT is undefined or null, set RAM=2. Otherwise, set RAM= ${MEM_LIMIT}
             : ${RAM:=${MEM_LIMIT:-2}}
             : ${CPU:=${CPU_LIMIT:-2}}

             # Optimize Odoo parameters
             if [[ ${CPU} -ge 6 ]] && [[ ${RAM} -ge 16 ]]; then
                 echo "Optimize Odoo parameters for Advanced or Advanced+ plan."
                 add_setting_to_conf workers 8
                 add_setting_to_conf limit_request 16384
                 add_setting_to_conf limit_memory_hard 7549747200
                 add_setting_to_conf limit_memory_soft 6039797760
             elif [[ ${CPU} -ge 4 ]] && [[ ${RAM} -ge 8 ]]; then
                 echo "Optimize Odoo parameters for Professional plan."
                 add_setting_to_conf workers 6
                 add_setting_to_conf limit_request 8192
                 add_setting_to_conf limit_memory_hard 5872025600
                 add_setting_to_conf limit_memory_soft 4697620480
             elif [[ ${CPU} -ge 3 ]] && [[ ${RAM} -ge 4 ]]; then
                 echo "Optimize Odoo parameters for Basic plan."
                 add_setting_to_conf workers 4
                 add_setting_to_conf limit_request 4096
                 add_setting_to_conf limit_memory_hard 2684354560
                 add_setting_to_conf limit_memory_soft 2147483648
             else
                 echo "Optimize Odoo parameters for Express plan."
                 add_setting_to_conf workers 2
                 add_setting_to_conf limit_request 2048
                 add_setting_to_conf limit_memory_hard 1342177280
                 add_setting_to_conf limit_memory_soft 1073741824
             fi
          fi

          # init install
          if [ ! -d /cloudclusters/odoo ]; then
              mkdir /cloudclusters/odoo
              tar -xzf /opt/odoo/odoo_*.tar.gz -C /cloudclusters/odoo --strip-components=1
              sed -i '560a\<a href="https://www.odclusters.com" title="Odoo Cloud Hosting on Kubernetes Cloud">Hosted By Odoo Clusters</a>' /cloudclusters/odoo/odoo/addons/web/views/webclient_templates.xml
              virtualenv -p python3 odoo/venv
              source odoo/venv/bin/activate
              pip3 install -r odoo/requirements.txt
              pip3 install psycopg2-binary
              pip3 install requests
              chown -R odoo:odoo /cloudclusters/odoo
              chmod -R 755 /cloudclusters/odoo

              if [ -f /cloudclusters/odoo/setup/odoo ]; then
          	    chmod +x /cloudclusters/odoo/setup/odoo
          	    mv /cloudclusters/odoo/setup/odoo odoo/odoo-bin
              fi

              postgres.sh postgres &

              gosu odoo odoo.sh odoo &

              while true
              do
                  if psql -Uadmin -d admin -c "select * from account_account;"
                  then
                      break
                  else
                      sleep 10
                  fi
              done

              exit 0
            fi
          fi

        env:
        - name: IS_INITCONTAINER
          value: "true"
        - name: ODOO_PASSWORD
          valueFrom:
            secretKeyRef:
              key: ODOO_PASSWORD
              name: {{ include "odoo.fullname" . }}
        - name: MASTER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MASTER_PASSWORD
              name: {{ include "odoo.fullname" . }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRES_PASSWORD
              name: {{ include "odoo.fullname" . }}
        - name: FB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: FB_PASSWORD
              name: {{ include "odoo.fullname" . }}
        - name: FB_USERNAME
          value: admin
        {{- with .Values.odoo }}
        - name: ODOO_EMAIL
          value: {{ .odoo_email | default "xx.xx@xx.com" | quote }}
        - name: ODOO_DATABASE
          value: {{ .odoo_database | default "admin" | quote }}
        - name: ODOO_DEMO_DATABASE
          value:  {{ .odoo_demo_database | default "admin" | quote }}
        {{- end }}
        {{- with .Values.postgres }}
        - name: POSTGRES_USER
          value: {{ .postgres_user | default "admin" | quote }}
        - name: POSTGRES_DB
          value: {{ .postgres_db | default "admin" | quote }}
        {{- end }}
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MEM_LIMIT
          valueFrom:
            resourceFieldRef:
              containerName: odoo
              divisor: "1G"
              resource: limits.memory
        - name: CPU_LIMIT
          valueFrom:
            resourceFieldRef:
              containerName: odoo
              divisor: "1"
              resource: limits.cpu
        {{- with .Values.image }}
        image: "{{ .registry }}/{{ .app.repository }}:{{ .app.tag }}"
        imagePullPolicy: {{ .app.pullPolicy }}
        {{- end }}
        name: init-odoo
        volumeMounts:
          - mountPath: /cloudclusters
            name: data
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- with .Values.image }} 
          image: "{{ .registry }}/{{ .app.repository }}:{{ .app.tag }}"
          imagePullPolicy: {{ .app.pullPolicy }}
          {{- end }}
          ports:
            - name: http
              containerPort: 8072
              protocol: TCP
            - containerPort: 8000
              name: filebrowser
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}           
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - livenessProbe.sh
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - readinessProbe.sh
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          volumeMounts:
            - mountPath: /cloudclusters
              name: data
          env:
          - name: ODOO_PASSWORD
            valueFrom:
              secretKeyRef:
                key: ODOO_PASSWORD
                name: {{ include "odoo.fullname" . }}
          - name: MASTER_PASSWORD
            valueFrom:
              secretKeyRef:
                key: MASTER_PASSWORD
                name: {{ include "odoo.fullname" . }}                
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: POSTGRES_PASSWORD
                name: {{ include "odoo.fullname" . }}
          - name: FB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: FB_PASSWORD
                name: {{ include "odoo.fullname" . }}             
          - name: FB_USERNAME
            value: admin
          {{- with .Values.odoo }}
          - name: ODOO_DEMO_DATABASE
            value:  {{ .odoo_demo_database | default "odoodemo" | quote }}             
          - name: ODOO_EMAIL
            value: {{ .odoo_email | default "xx.xx@xx.com" | quote }}
          - name: ODOO_DATABASE
            value: {{ .odoo_database | default "admin" | quote }}            
          {{- end }}
          {{- with .Values.postgres }}
          - name: POSTGRES_USER
            value: {{ .postgres_user | default "admin" | quote }}
          - name: POSTGRES_DB
            value: {{ .postgres_db | default "admin" | quote }}          
          {{- end }}
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MEM_LIMIT
            valueFrom:
              resourceFieldRef:
                containerName: odoo
                divisor: "1G"
                resource: limits.memory
          - name: CPU_LIMIT
            valueFrom:
              resourceFieldRef:
                containerName: odoo
                divisor: "1"
                resource: limits.cpu
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- if .Values.agent.enabled }}   
        - name: {{ .Chart.Name }}-agent
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- with .Values.image }} 
          image: "{{ .registry }}/{{ .agent.repository }}:{{ .agent.tag }}"
          imagePullPolicy: {{ .agent.pullPolicy }}
          {{- end }}
          ports:
            - name: server-port
              containerPort: 5001
              protocol: TCP
            - name: export-port
              containerPort: 9001
              protocol: TCP
          env:
          - name: ODOO_PASSWORD
            valueFrom:
              secretKeyRef:
                key: ODOO_PASSWORD
                name: {{ include "odoo.fullname" . }}
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: POSTGRES_PASSWORD
                name: {{ include "odoo.fullname" . }}
          - name: POD_LABEL_NAME
            value: {{ .Release.Name }}
          - name: STACK_NAME
            value: {{ .Release.Name }}
          - name: KUBECONFIG
            value: /backup/admin.conf
          - name: METRICS_NAMESPACE
            value: odoo
          resources:
            limits:
              cpu: '1.0'
              memory: 2G
            requests:
              cpu: '0.1'
              memory: 100M  
          volumeMounts:
          - mountPath: /cloudclusters
            name: data
          - mountPath: /backup
            name: backup
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      volumes:
        - hostPath:
            path: /clusterdata/backup/
          name: backup    
{{- if .Values.persistence.enabled }}
  {{- if.Values.persistence.existingClaim }}
        - name: datadir
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim }}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
        {{- range $key, $value := .Values.persistence.annotations }}
          {{ $key }}: "{{ $value }}"
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
  {{- end }}
{{- else }}
        - name: datadir
          emptyDir: {}
{{- end }}


